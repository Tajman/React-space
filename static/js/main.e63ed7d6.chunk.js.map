{"version":3,"sources":["memeItem.js","search.js","gif.js","giflist.js","App.js","serviceWorker.js","memeAction.js","memeReduce.js","index.js"],"names":["MemeItem","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hovered","_this2","react_default","a","createElement","className","onMouseEnter","setState","onMouseLeave","src","props","meme","url","alt","name","Component","connect","Search","value","event","searchText","target","onTermChange","type","onChange","handleChange","bind","placeholder","id","Gif","image","gif","images","downsized","GifList","gifs","map","src_gif","key","App","memeLimit","disabledNext","disabledPrev","concat","request","get","err","res","body","data","e","_this3","_this$state","Jumbotron","Container_default","memes","slice","index","memeItem","text0","text1","Prev","toggle","togglePrev","active","Next","toggleNext","search","getUrl","giflist","href","Button","variant","onClick","disabled","Boolean","window","location","hostname","match","RECEIVE_MEMES","rootReducer","combineReducers","arguments","length","undefined","action","store","createStore","applyMiddleware","thunk","subscribe","console","log","getState","dispatch","fetch","then","response","json","reveiveMemes","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e63ed7d6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass MemeItem extends Component{\r\n  constructor(){\r\n    super()\r\n\r\n    this.state = {\r\n      hovered: false\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div\r\n        className='meme-item'\r\n        onMouseEnter={() => this.setState({hovered: true})}\r\n        onMouseLeave={() => this.setState({hovered: false})}\r\n        >\r\n        <img\r\n          src={this.props.meme.url}\r\n          alt={this.props.meme.name}\r\n          className={this.state.hovered ? 'meme-img darken-img' : 'meme-img'}\r\n        />\r\n      <p className={this.state.hovered ? 'meme-txt' : 'no-txt'}>\r\n          {this.props.meme.name}\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default connect(null)(MemeItem)","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {value: ''};\r\n    }\r\n\r\n    handleChange(event) {\r\n        const searchText = event.target.value;\r\n        this.setState({\r\n            value: searchText\r\n        });\r\n            this.props.onTermChange(searchText)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <input type=\"text\"\r\n                     onChange ={this.handleChange.bind(this)}\r\n                     placeholder=\"Search GIF\"\r\n                     value={this.state.value} \r\n                     id = 'search-bar'  \r\n                  />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search","import React from 'react';\r\n//const LOADER = 'https://media.giphy.com/media/13nhjlnTv2Sr3a/giphy.gif';\r\n\r\n    const Gif = (image) => {\r\n        return (\r\n            <div id = 'gif'>\r\n      <img src={image.gif.images.downsized.url} />\r\n    </div>\r\n        ); \r\n    \r\n};\r\n\r\nexport default Gif","import React from 'react';\r\nimport Gif from './gif';\r\n\r\nconst GifList = (props) => {\r\n  const gif = props.gifs.map((image) => {\r\n    return <Gif key={image.id} gif={image} />\r\n  });\r\n\r\n  return (\r\n    <div id = 'giflist'>{gif}</div>\r\n  );\r\n};\r\n\r\nexport default GifList;","import React, { Component } from 'react';\nimport './style/App.css';  \nimport {connect} from 'react-redux';\nimport Container from 'react-bootstrap/Container';  \nimport {Jumbotron, Button} from 'react-bootstrap'; \n\nimport MemeItem from './memeItem';  \nimport Search from './search'; \nimport Giflist from './giflist'; \nimport request from 'superagent';\nexport const API_GIPHY = 'WBxWrgJ3GP78HKFzD27Vu9FvNAwnfbnn';\n\n\nclass App extends Component {\n    constructor(){\n        super()\n\n        this.state = {\n            memeLimit: 10,\n            disabledNext: false,\n            disabledPrev: false,   \n            gifs: []\n        }\n    } \n\n\n    getUrl(searchText) { \n        const url = `https://api.giphy.com/v1/gifs/search?api_key=${API_GIPHY}&q=${searchText}&limit=10&offset=0&rating=PG-13&lang=en` \n\n        request.get(url, (err, res) => {\n            this.setState({gifs: res.body.data})\n        });\n    }\n\n    togglePrev(e) {\n        let memeLimit = this.state.memeLimit - 10;\n        let disabledPrev = (memeLimit === 0);\n\n        this.setState({ memeLimit: memeLimit, disabledPrev: disabledPrev, disabledNext: false })\n    }\n\n    toggleNext(e) {\n        let memeLimit = this.state.memeLimit + 10;\n        let disabledNext = memeLimit === (this.props.memeLimit - 10);\n\n        this.setState({ memeLimit: memeLimit, disabledNext: disabledNext, disabledPrev: false })\n    }\n\n\n    render(){ \n        const { disabledNext, disabledPrev } = this.state\n        return(\n            <div>\n                <Jumbotron id='jumb'>\n                    <h2><u>Welcome to the Meme Generator</u></h2> \n                </Jumbotron> \n            \n                <Container id='cont-1'> \n                    <h2>Imgflip meme list</h2>\n                {\n                    this.props.memes.slice(0, this.state.memeLimit).map((meme, index) => {\n                    return (\n                        <MemeItem\n                            meme={meme}\n                            key={index}\n                            text0={this.state.text0}\n                            text1={this.state.text1}\n                        />\n                    )\n                  })\n                } \n\n            <div id = 'spacel'/>\n            <div> \n                <Prev toggle={(e) => this.togglePrev(e)} active={disabledPrev} /> \n            <div id = 'spacew'/>\n                <Next toggle={(e) => this.toggleNext(e)} active={disabledNext} />\n            </div>\n                </Container>  \n\n                <Container id='cont-1'> \n                    <h2>Search for a gif</h2> \n                        <Search onTermChange={searchText => this.getUrl(searchText)} /> \n\n                        <Giflist gifs={this.state.gifs}/>\n                </Container>\n\n                <Container id='footer'> \n                    <a href=\"https://github.com/Tajman/React-space\">My github repository</a>\n                </Container>\n            </div>\n              )\n          }\n} \n\nfunction Prev(props) {\n    return (\n        <Button variant=\"primary\" onClick={props.toggle} disabled={props.active}>Previous</Button>\n    );\n}\n\nfunction Next(props) {\n    return (\n        <Button variant=\"primary\" onClick={props.toggle} disabled={props.active}>Next</Button>\n    );\n}\n\nfunction mapStateToProps(state){\n    return state\n}\n\nexport default connect(mapStateToProps,null)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const RECEIVE_MEMES = 'RECEIVE_MEMES';\r\n\r\nfunction reveiveMemes(json){\r\n  const {memes} = json.data\r\n  return {\r\n    type: RECEIVE_MEMES,\r\n    memes\r\n  }\r\n}\r\n\r\nfunction fetchMemesJson(){\r\n  return fetch('https://api.imgflip.com/get_memes')\r\n      .then(response => response.json())\r\n}\r\n\r\nexport function fetchMemes(){\r\n  return function(dispatch){\r\n    return fetchMemesJson()\r\n      .then(json => dispatch(reveiveMemes(json)))\r\n  }\r\n}\r\n","import {RECEIVE_MEMES} from './memeAction';\r\nimport {combineReducers} from 'redux';\r\n\r\n\r\nfunction memes(state = [], action){\r\n  switch(action.type){\r\n    case RECEIVE_MEMES:\r\n      return action.memes\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  memes,\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';   \nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n \nimport rootReducer from './memeReduce';\nimport {fetchMemes} from './memeAction'; \n\nconst store = createStore(rootReducer, applyMiddleware(thunk)); \n\nstore.subscribe(() => console.log('store', store.getState()))\nstore.dispatch(fetchMemes())\n\nReactDOM.render(<Provider store={store}>\n                <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}